version: "3.8"
services:
  postgres-auth:
    image: "postgres:alpine"
    environment:
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    #   Set a volume for data and initial sql script
    #   May configure initial db for future demo
    volumes:
      - "pgdata_auth:/var/lib/postgresql/data"
      # - ./init:/docker-entrypoint-initdb.d/
    command: ["postgres", "-c", "log_statement=all"]
  reverse-proxy:
    # The official v2 Traefik docker image
    image: traefik:v2.10
    # Enables the web UI and tells Traefik to listen to docker
    command:
    - "--api.insecure=true"
    - "--providers.docker"
    - "--providers.docker.exposedByDefault=false"
    ports:
      # The HTTP port
      - "80:80"
      # The Web UI (enabled by --api.insecure=true)
      - "8080:8080"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
  account:
    build:
      context: ./account
      target: builder
    image: account # if we don't give image name, traefik won't create router ü§∑‚Äç‚ôÇÔ∏è
    expose:
      - "8008" # seems necessary for Traefik to have internal expose of port
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.account.rule=Host(`hapalin.test`) && PathPrefix(`/api/account`)"
    env_file:
      - .env.dev
    volumes:
      - ./account:/go/src/app
    depends_on:
      - postgres-auth
    # have to use $$ (double-dollar) so docker doesn't try to substitute a variable
    command: reflex -v -r "\.go$$" -s -- sh -c "go run ./"

volumes:
  pgdata_auth: